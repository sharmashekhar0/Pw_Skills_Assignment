Question: Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts
important?

Answer: 
In JavaScript, the precedence and associativity of operators determine the order in which operations are performed in an expression. Understanding these concepts is crucial for writing correct and predictable code. Let's discuss each concept:

Precedence:
Precedence refers to the priority of operators in an expression. It determines which operation gets executed first when there are multiple operators in an expression.
Operators with higher precedence are evaluated first. For example, multiplication (*) has a higher precedence than addition (+), so 2 * 3 + 4 is evaluated as (2 * 3) + 4.
You can use parentheses to override the default precedence and explicitly specify the order of evaluation.

Highest Precedence:
Grouping: ()

High Precedence:
Member access: obj.property, obj['property']
Function call: func()
Increment/Decrement: ++, --
Logical NOT: !
Bitwise NOT: ~
Unary plus and minus: +expr, -expr, ++var, --var
Typeof: typeof expr
Medium Precedence:

Multiplication, division, and remainder: *, /, %
Low Precedence:

Addition and subtraction: +, -
Even Lower Precedence:

Bitwise left shift, right shift, and unsigned right shift: <<, >>, >>>
Lower Precedence:

Less than, less than or equal, greater than, greater than or equal: <, <=, >, >=
Even Lower Precedence:

Equality and inequality: ==, !=, ===, !==
Lower Precedence:

Bitwise AND: &
Even Lower Precedence:

Bitwise XOR: ^
Lowest Precedence:

Bitwise OR: |
Logical AND: &&
Logical OR: ||
Conditional (Ternary) Operator: condition ? expr1 : expr2
Assignment operators: =, +=, -=, *=, /=, %= etc.


Associativity:
Associativity defines the order in which operators of the same precedence are executed. It can be left-to-right or right-to-left.
For example, the addition operator (+) is left-associative, so in the expression 2 + 3 + 4, the operations are performed from left to right as (2 + 3) + 4.
The assignment operator (=) is right-associative, so in an expression like a = b = 5, the assignment is performed from right to left, resulting in both a and b being assigned the value 5.

Associativity defines the order in which operators of the same precedence are executed.

Left-to-Right Associativity:

Assignment operators: =, +=, -=, *=, /=, %= etc.
Logical AND: &&
Logical OR: ||
Conditional (Ternary) Operator: condition ? expr1 : expr2
Bitwise AND: &
Bitwise XOR: ^
Bitwise OR: |
Addition: +
Subtraction: -
Multiplication: *
Division: /
Remainder: %
Bitwise left shift: <<
Bitwise right shift: >>
Bitwise unsigned right shift: >>>
Right-to-Left Associativity:

Unary operators: ++var, --var, +expr, -expr, !, ~
Exponentiation: **

Important Reasons:

1. Correctness of Expressions:
Knowing the precedence and associativity helps ensure that your expressions are evaluated in the intended order. This is crucial for writing correct mathematical and logical expressions.

2. Readability:
Code readability is enhanced when operators are used with a clear understanding of their precedence and associativity. It makes the code more self-explanatory and easier for others to understand.

3. Avoiding Bugs:
Incorrect assumptions about operator precedence and associativity can lead to subtle bugs that are hard to identify. Explicitly using parentheses when needed can prevent such issues.

4. Maintainability:
Code that follows a consistent and well-understood order of operations is easier to maintain. It reduces the likelihood of introducing errors when making changes to the code.

