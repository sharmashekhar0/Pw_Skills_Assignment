Question : Compare Promises to callbacks and discuss why Promises are preferred for managing asynchronous
code.

Answer. Callbacks and Promises are both used to manage asynchronous code in JavaScript, but Promises offer several advantages over traditional callbacks, making them preferred in many scenarios.

Callbacks:

1. Callbacks are functions passed as arguments to other functions, which are then invoked when an asynchronous operation completes.

2. They can lead to "callback hell" or "pyramid of doom" when dealing with multiple nested asynchronous operations, making code difficult to read and maintain.

3. Error handling can be cumbersome with callbacks, often resulting in error propagation issues and making error handling less straightforward.

4. Callbacks lack built-in mechanisms for composition, making it challenging to chain asynchronous operations or handle dependencies between them.

Promises:

1. Promises provide a cleaner and more structured way to handle asynchronous operations, allowing developers to write more readable and maintainable code.

2. They offer built-in support for chaining asynchronous operations using methods like then() and catch(), enabling more straightforward composition of asynchronous tasks.

3. Promises simplify error handling by providing a centralized mechanism for catching errors using the catch() method, making error propagation more manageable.

4. Promises introduce the concept of a state, allowing asynchronous operations to be in one of three states: pending, fulfilled, or rejected, providing better control and handling of asynchronous outcomes.